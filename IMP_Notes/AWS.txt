

###########################  AWS   ######################################

EC2

eni
user data
curl http://169.254.169.254/latest/meta-data
pip=$(http://169.254.169.254/latest/meta-data/local-ipv4)
pub-ip=$(http://169.254.169.254/latest/meta-data/public-ipv4)

AMI,IAM role, Storage, Monitoring, AV Zone, Networking, Snapshots, High Avalability, Auto scaling groups, ALB, NLB

Launch Templates --> For deploying the same servers.
    source: AWS-B28, Video12.
    This is used for deploying servers only. This can't be used for creaating any other resource in AWS. 
   usage: Create a launch template for creating a server and use the same template id in AWS cloudShell console and run the for loop for deploying 3 servers. 
   
Spot Instances vs on demand Instances. 

It's recommended for K8s lab. As soon as on demand get the demand then immediately it terminqee


########################  EBS  ################################

for diskmgmt commands: teluguitfactory(disk mgmt in linux course).

lsblk
fdisk ---> crate partiotion from disk
    n -> new partiotion 
    p -> primary partiotion
    go with default values
    finally enter w --> write the changes
    then create file system:
        mkfs.ext4 /dev/xvdf1  --> Make partition (ext4/xfs)
        press lsblk
        create a folder named /ebsvol then mount newly created partiotion to this dir. 
        press lsblk.
        But these changes are not perminant, once we reboot/shtdown the machine these changes will go off. To make this persistant update the changes in fstab.
        /etc/fstab
        after the entering the entry in the fstab file then run command 'mount -a'. It's refresh all the mount points. 
        For every reboot demon will look for fstab file and will mount the mount points as defined in fstab file. 
        
        If we extend the EBS volume , then it won't reflect immediately in lsblk. To effect the changes 
        growpart /dev/xvdf 1 ---> for extending the partiotion. 
        also file system shoud get these changes, then run 'resize2fs /dev/xvdf1'. 


############ Security  ############################

NSG is works as Firewall. 

But need to find the vulnerabilities in application and OS level. These has to be sorted out, first deploy a VM and scan for vulnerabilities and remediate them. 
Then create a AMI from this then deploy VMs from this AMI when ever we need. 

AWS inspector is the one the tool offered by AWS. 

Here we can create a policies and scanning rules against machines and give a name for this. 

once we run the scan. we will get the report, it contains all the vulnerabilities 


##########################  AMI Images  ################################

AMI custom images can be created using packer. 
All listed images in default view are carrying with many vulnerabilities, it leads to significant risk. to mitigate this issue, we have to remediate them before deploy.
usually this mitigation can be accomplish through ansible. 

vulnerabilities are caught through scanners such as Qualys, Nexus, Nexpose ,AWS inspector. 
After mitigating all the vulnerabilities, reboot the machine, then again initiate the scan. we haveto repeat this process untill it become zero vulnerabilities.
later generate AMI from this VM. so that upcoming deployments from this image will have minimal vulnerabilities. 

###################### Snapshots  ##########################################

It's a backup for EBS volume. AMI are consider as root volume backups. 

If we attach 10Gb EBS volume to any server, and keep adding some files to it. Then if we take snapshot, then it's resultant size would be 10gb. 
Later we add few more files to it, then 2nd snapshot conatains all files( files from 1st snap and 2nd). 
Later we add few more files to it, then 3nd snapshot conatains all files( files from 1st snap, 2nd and 3rd).

At any moment if we would like to restore the volume, then we can take latest snapshot. It covers all the files. 

But now if we delete somefiles then we have taken snapshot4. 
Also added few files then taken snapshot5. 

In this case, if we would like to restore all the files then. we have to restore the snapshot5 and snapshot3 to recover all the files. 


######################  SSO  ################################################

Configure Directory service (Windows AD Managed), with some domain name(myworld.local). This will take 30 minutes to finish the installation. we should pass the VPC where our -
servers and apps are hosted. Later provide the 2 public subnets. 

After the configure, keep a note about the DNS server IPs. 

Deploy windows server with t2.large sized VM. Join this server into domain by updating the DNS entries in network settings. 

After reboot, configure AD LDS in that server, add few user records and one security group. 

Then open SSO in portal, open the settings and enable the SSO. Later keep the identity source as "Active Directory". Later provide the domain name (it automatically fetch the details).

we should invite the another AWS account and add this into seperate oraganization unit for administration purpose. 

Now create "Permission Sets" --> Name them with properly.

After SSO setup, open AWS accounts from SSO page, then pick the account from organization unit-->select account-->search user/group from the search bar -->select rspect user -->

select the "Permission sets" --> after this user can have permissions what ever defined in permission sets. 

Validation: Open SSO -->settings--->look for url --> copy and open this in browser---> then enter the AD creds for the user who ever have access over 


########################  Profile ##############################################

aws configure --profile

[default]
region = us-east-1
output = json
[profile temp]
region = temp-region
output = json

provider "aws" {
    profile = "temp"
}



###################  Data sources  ##############################################    **********  IMP  ****************

data "aws_instance" "test_server" {
  for_each    = var.instance_ids
  instance_id = each.value
  filter {
    name   = "tag:Environment"
    values = ["test"]
  }
  filter {
    name   = "instance-state-name"
    values = ["running"]
  }
}

resource "aws_ebs_volume" "test_server_drive" {
  for_each          = data.aws_instance.test_server
  availability_zone = data.aws_instance.test_server[each.key].availability_zone
  size              = var.drive_size
}

resource "aws_volume_attachment" "test_server_drive_attach" {
  for_each    = data.aws_instance.test_server
  device_name = "/dev/sdb"
  volume_id   = aws_ebs_volume.test_server_drive[each.key].id
  instance_id = data.aws_instance.test_server[each.key].id
}



#########################################  loops   #############################################################

output "instance_ip_addresses" {
  # Result is a map from instance id to private and public IP addresses, such as:
  #  {"i-1234" = ["192.168.1.2","54.234.188.251,] "i-5678" = ["192.168.1.5","3.90.189.190",] }
  value = {
    for instance in aws_instance.server:
      instance.id => instance.private_ip
  }
}



#####################################  IAM ###########################################################

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": [
                "ec2:RevokeSecurityGroupIngress",
                "ec2:AuthorizeSecurityGroupEgress",
                "ec2:AuthorizeSecurityGroupIngress",
                "ec2:UpdateSecurityGroupRuleDescriptionsEgress",
                "ec2:CreateSecurityGroup",
                "ec2:RevokeSecurityGroupEgress",
                "ec2:DeleteSecurityGroup",
                "ec2:ModifySecurityGroupRules",
                "ec2:UpdateSecurityGroupRuleDescriptionsIngress"
            ],
            "Resource": [
                "arn:aws:ec2:us-east-1:685776296081:security-group/*",
                "arn:aws:ec2:us-east-1: /vpc-03073d0cc5f391a7a"
                ]
        },
        {
            "Sid": "VisualEditor1",
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeSecurityGroupRules",
                "ec2:DescribeVpcs",
                "ec2:DescribeSecurityGroups"
            ],
            "Resource": "*"
        }
    ]
}





Subnet creation: 


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "Statement1",
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeVpcs",
                "ec2:DescribeRouteTables",
                "ec2:DescribeSubnets",
                "ec2:DescribeDhcpOptions",
                "ec2:DescribeNetworkAcls",
                "ec2:Describe*",
                "ec2:DescribeTags"
            ],
            "Resource": "*"
        },
        {
            "Sid": "CreatingSubnets",
            "Effect": "Allow",
            "Action": [
                "ec2:DescribeSubnets",
                "ec2:CreateSubnet",
                "ec2:ModifyVpcAttribute",
                "ec2:DeleteSubnet",
                "ec2:ModifySubnetAttribute",
                "ec2:CreateTags"
            ],
            "Resource": [
                "arn:aws:ec2:us-east-1:685776296081:vpc/vpc-03073d0cc5f391a7a",
                "arn:aws:ec2:us-east-1:685776296081:subnet/*"
            ],
            "Condition": {
                "ArnEquals": {
                    "ec2:Vpc": "arn:aws:ec2:us-east-1:685776296081:vpc/vpc-03073d0cc5f391a7a"
                }
            }
        }
    ]
}











#########################  STS  decode ######################################


aws sts decode-authorization-message --encoded-message $MSG --output text | jq '.'




#######################  S3 Policies  ########################################


{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "LimitS3Access",
            "Effect": "Allow",
            "Action": [
                "s3:ListAllMyBuckets",  ### Listing the buckets
                "s3:ListBucket",        ### Listing the content in buckets
                "s3:GetObject"          ### Download the content 
            ],
            "Resource": [
                "arn:aws:s3:::*"
            ]
        }
    ]
}



{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "LimitS3Access",
            "Effect": "Allow",
            "Action": [
                "s3:ListAllMyBuckets"
            ],
            "Resource": [
                "arn:aws:s3:::*"
            ]
        },
        {
            "Sid": "ListContentInBucket",
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:GetBucketLocation"
            ],
            "Resource": [
                "arn:aws:s3:::testing-mungaras783",
                "arn:aws:s3:::testing-one-mungaras783"
            ]
        },
        {
            "Sid": "DownloadContent",
            "Effect": "Allow",
            "Action": [
                "s3:GetObject",
                "s3:GetObjectAcl",
                "s3:PutObject",
                "s3:PutObjectAcl",
                "s3:DeleteObject"
            ],
            "Resource": [
                "arn:aws:s3:::testing-one-mungaras783/MyDrive/*"
            ]
        }
    ]
}



Resource S3 Policy for deny all Prinicipals 

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "DenyAll",
            "Effect": "Deny",
            "Principal": "*",
            "Action": "s3:*",
            "Resource": "arn:aws:s3:::testing-one-mungaras783/*"
        }
    ]
}


